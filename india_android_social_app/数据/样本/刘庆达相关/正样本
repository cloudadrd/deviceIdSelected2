package org.yeahmobi.dmp

import org.apache.spark.sql
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.{IntegerType, StringType, StructType, _}
import org.apache.spark.sql.{Row, SparkSession}

import java.text.SimpleDateFormat
import java.util.{Calendar, Date}


object pre_model_v3 {
  def main(args: Array[String]): Unit = {
    val spark = new sql.SparkSession.Builder()
      .appName("pre_model_data")
      .enableHiveSupport()
      .getOrCreate()
    var today_date: Date = new Date()
    val interval = args(0).toInt
    val yesterday = getdayBefore(today_date, interval)
    val three_day = getdayBefore(today_date, interval + 2 )
    val week = getdayBefore(today_date, interval + 30 )

    val bundle_path = "oss://dmp-yeahmobi-com/hive_dataware/dmp/t_dmp_device_tag/day=" + yesterday +"/platform=android/geo=IND"
    val df_tag = spark.read.format("orc").load(bundle_path)
    df_tag.createTempView("source_tag")

    val fuyu_path = "oss://sdkemr-yeahmobi/sdk_device/fuyu/*_IN"
    val fuyu_source = spark.read.format("orc").load(fuyu_path)
    fuyu_source.createTempView("fuyu_in")


    val sdk_path = "oss://sdkemr-yeahmobi/sdk_device/pre_data.csv"
    val sdk_rdd = spark.sparkContext.textFile(sdk_path).map(line => Row(line.split(",")(1),line.split(",")(2)))
    val schema = StructType(List(
      StructField("device_id",StringType,true),
      StructField("pkg",StringType,true)
    ))
    val df_sdk =  spark.createDataFrame(sdk_rdd,schema)
    df_sdk.createOrReplaceTempView("sdk_device")

    val c = spark.read.format("orc").load("oss://dmp-yeahmobi-com/hive_dataware/dmp/t_dmp_app_info/")
    c.createTempView("app_info")

    val rdd = spark.sql(
      s"""
         select a.*
         |,case when c.label like '%2' then '2'  when c.label like '%1' then '1' else '0' end int_tag
         |,case when c.label like '%w%' then '0'  when c.label like '%x%' then '1' when c.label like '%y%' then '3' when c.label like '%z%' then '5' else '0' end source_tag
         |,b.category_name maincategory ,b.subcategory_name subcategory,b.approx_size_bytes size from (
         | (select device_id,pkg from sdk_device)m
         | left join
         | (select ifa device_id
         | , bundles user_bundle_list
         | ,geo country
         | ,osversion os_ver_name
         | ,lang language
         | ,bundles_size install_bundle_size
         | ,bundle
         | ,lastactiveday
         |  from
         | (select ifa
         | ,bundles
         | ,'IND' geo
         | ,osversion
         | ,lang
         | ,size(bundles) bundles_size
         | ,concat(bundles[size(bundles)-1],',',bundles[size(bundles)-2],',',bundles[size(bundles)-3]) bund
         | ,lastactiveday
         | from source_tag where
         | lastactiveday >= '${week}'
         | and
         | ( array_contains(bundles,'com.next.innovation.takatak') or array_contains(bundles,'in.mohalla.video') or array_contains(bundles,'in.mohalla.sharechat') )
         |
         | ) lateral view explode(split(bund,',')) t as bundle ) a
         | on m.device_id = a.device_id
         | left join
         | (select id,category_name,subcategory_name ,approx_size_bytes from app_info )b
         | on a.bundle = b.id
         |left join
         |(select  device,max(label) label from fuyu_in group by device) c
         |on a.device_id = c.device
         | ) where c.label != '' and a.device_id != ""
         |""".stripMargin)

    val rdd88 = rdd.withColumn("latest3", struct("bundle", "maincategory","subcategory","size"))
      .groupBy("device_id", "user_bundle_list","int_tag","source_tag", "country","os_ver_name","language","install_bundle_size","lastactiveday").agg(collect_list("latest3").as("latest3_bundle_info"))
      .repartition(200).write.orc("oss://sdkemr-yeahmobi/sdk_device/pre_model/pre_v3/day=" + yesterday )
  }
  def getdayBefore(dt:Date,interval:Int):String={
    val dateFormat :SimpleDateFormat = new SimpleDateFormat("yyyyMMdd")
    val cal:Calendar = Calendar.getInstance()
    cal.setTime(dt)
    cal.add(Calendar.DATE,-interval)
    val date=dateFormat.format(cal.getTime)
    date
  }
  def getdayString(dt:Date,interval:Int):String = {
    var today_date: Date = new Date()
    val dateFormat :SimpleDateFormat = new SimpleDateFormat("yyyyMMdd")
    val cal:Calendar = Calendar.getInstance()
    cal.setTime(today_date)
    var st = ""
    for(  a <- 1 to interval){
      cal.add(Calendar.DATE,-1)
      print(a)
      val date=dateFormat.format(cal.getTime)
      st = st + "," + date
    }
    st = "{" + st.substring(1) + "}"

    st
  }
}